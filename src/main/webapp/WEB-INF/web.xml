<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0">
	<display-name>ssh-platform</display-name>
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>
	<!-- 请求参数的Xss过滤器 -->
	<filter>
		<filter-name>xssFilter</filter-name>
		<filter-class>org.ssh.filter.XssFilterJava</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>xssFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- Struts2的默认过滤器 -->
	<filter>
		<filter-name>struts2</filter-name>
		<filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>struts2</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 
	在Spring中集成Shiro的原理就是：通过在web.xml中配置的Shiro Filter与Spring IoC中定义的相应的Shiro Bean定义建立关系，从而实现在Spring框架集成Shiro。
	 -->
	<!-- The filter-name matches name of a 'shiroFilter' bean inside applicationContext.xml -->
	<filter>
	    <filter-name>shiroFilter</filter-name>
	    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	    <init-param>
	        <param-name>targetFilterLifecycle</param-name>
	        <param-value>true</param-value>
	    </init-param>
	</filter>	
	<!-- Make sure any request you want accessible to Shiro is filtered. /* catches all -->
	<!-- requests.  Usually this filter mapping is defined first (before all others) to -->
	<!-- ensure that Shiro works in subsequent filters in the filter chain:             -->
	<filter-mapping>
	    <filter-name>shiroFilter</filter-name>
	    <url-pattern>/*</url-pattern>
	</filter-mapping>
	
	
	
	<!-- spring的监听器 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- spring配置文件位置  ,classpath:spring-datasource-ext1.xml,classpath:cxfdemo-beans.xml-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:applicationContext.xml</param-value>
	</context-param>
	<listener>
		<listener-class>org.ssh.listener.MailSendListener</listener-class>
	</listener>
	<listener>
		<listener-class>org.ssh.listener.OnlineUserListen</listener-class>
	</listener>
	
	 <!-- spring配置文件位置 --> 
	 <!-- <context-param> 
	 	<param-name>contextConfigLocation</param-name> 
	 	<param-value>classpath:spring-mybatis.xml</param-value> 
	 </context-param>  -->
	 <!--由Spring载入的Log4j配置文件位置--> 
	 <context-param> 
	 	<param-name>log4jConfigLocation</param-name> 
	 	<param-value>classpath:log4j.properties</param-value> 
	 </context-param> 
	 <!-- spring监听log4j监听器的参数，定时检查log4j配置文件 --> 
	 <context-param> 
	 	<param-name>log4jRefreshInterval</param-name> 
	 	<param-value>60000</param-value> 
	 </context-param>

	
	<!-- session保存时间 -->
	<session-config>
		<session-timeout>60</session-timeout>
	</session-config>
	
	<!-- 定义服务器错误WEB.XML整合Spring MVC -->
	<error-page>
		<error-code>404</error-code>
		<location>/404</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/500</location>
	</error-page>
	<!-- 未捕获的错误，同样可指定其它异常类，或自定义异常类 -->
	<error-page>
		<exception-type>java.lang.Exception</exception-type>
		<location>/WEB-INF/error.jsp</location>
	</error-page>
	
	<!-- jsp自定义标签 -->
	
</web-app>