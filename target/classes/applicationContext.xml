<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- 开启包扫描，并注册注解 -->
	<context:component-scan base-package="org.ssh.*" />
	


<!-- spring自动扫描@Component,@Controller,@Service等这些注解的类，则把这些类注册为bean
1.配置主容器中Spring不扫描@Controller注解 
<context:component-scan base-package="com.linktrust.edu">
<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
</context:component-scan>
spring自动扫描@Controller注解的类，则把这些类注册为bean 
2.spring mvc容器中只扫描@Controller注解
<context:component-scan base-package="com.linktrust.edu">
<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
</context:component-scan>
 exclude-filter 不扫描，include-filter 只扫描 -->	

	<!-- 引入属性文件 -->
	<context:property-placeholder location="classpath:jdbc.properties,classpath:hikari.properties" />

	<!-- 或者引入属性文件 单个文件将locations改为location -->
	<!-- <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyOverrideConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc-dev.properties</value>
				<value>classpath:jdbc-prod.properties</value>
				<value>classpath:jdbc-test.properties</value>
			</list>
		</property>
	</bean> -->

	<!-- 配置C3P0连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<!-- 数据库连接相关信息 -->
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="driverClass" value="${jdbc.driverClass}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	<!-- 配置hikari连接池 -->
	<!-- Hikari Datasource -->
    <bean id="dataSourceHikari" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <property name="driverClassName" value="${hikari.driverClass}" />
        <property name="jdbcUrl" value="${hikari.url}" />
        <property name="username" value="${hikari.username}" />
        <property name="password" value="${hikari.password}" />
        <!-- 连接只读数据库时配置为true， 保证安全 -->
        <property name="readOnly" value="false" />
        <!-- 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 -->
        <property name="connectionTimeout" value="30000" />
        <!-- 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 -->
        <property name="idleTimeout" value="600000" />
        <!-- 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL 
            wait_timeout参数（show variables like '%timeout%';） -->
        <property name="maxLifetime" value="1800000" />
        <!-- 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) -->
        <property name="maximumPoolSize" value="60" />
        <property name="minimumIdle" value="10" />
    </bean>
	
	
	<!--
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClass}" />
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}" />
		<property name="user" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<property name="minPoolSize" value="${jdbc.miniPoolSize}" />
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>  
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}"/>
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}"/>
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}"/>
		
		<property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}"/>
		<property name="acquireRetryDelay" value="${jdbc.acquireRetryDelay}"/>
		<property name="testConnectionOnCheckin" value="${jdbc.testConnectionOnCheckin}"/>
		<property name="automaticTestTable" value="${jdbc.automaticTestTable}"/>
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"/>
		<property name="checkoutTimeout" value="${jdbc.checkoutTimeout}"/>
	</bean>
	-->
	
	<!-- 配置Hibernate的SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<!-- 注入连接池 -->
		<property name="dataSource" ref="dataSourceHikari" />
		<!-- 配置Hibernate属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.show_sql">true</prop><!-- 是否展示SQL -->
				<prop key="hibernate.hbm2ddl.auto">update</prop><!-- 是否自动创建表结构 -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
			</props>
		</property>
		<!-- 扫描并加载注解过的实体类 -->
		<property name="packagesToScan" value="org.ssh.*.model" />
	</bean>
	
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">  
        <property name="sessionFactory" ref="sessionFactory"/>  
    </bean>  

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<!-- 注入SessionFactory -->
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 配置事务增强 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 配置需要进行事务管理的方法，和事务传播行为 -->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<!-- 配置切面 -->
	<aop:config>
		<!-- 配置切入点 * org.ssh.service.*+.*(..) *：表示方法的作用域，*表示所有 org.ssh.service.*：表示org.ssh.service下的任何包 
			org.ssh.service.*+：表示org.ssh.service下的任何包及其子包 *(..)：*表示任何方法，(..)表示方法的任何参数 -->
		<aop:pointcut id="pointcut"
			expression="execution(* org.ssh.*.service.*+.*(..))" />
		<!-- 适配切入点和事务增强 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut" />
	</aop:config>
	
	<!-- 错误路径和错误页面，注意指定viewResolver -->
	<!-- <mvc:view-controller path="/404" view-name="404"/>
	<mvc:view-controller path="/500" view-name="500"/>
	<mvc:view-controller path="/uncaughtException" view-name="uncaughtException"/>
 -->
 
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
	    <!-- 默认错误页面，就是不在exceptionMappings指定范围内 -->
	    <property name="defaultErrorView" value="uncaughtException" />
	    <property name="exceptionMappings">
	        <props>
	            <!-- 异常类名，可以是全路径，错误页面或Controller路径！ -->
	            <prop key=".NullPointerException">NullPointerException</prop>
	            <prop key="java.io.IOException">IOException</prop>
	        </props>
	    </property>
	</bean> 
	
	
	
	<!-- 集成apache shiro 权限框架-->
	<!-- 1、与Spring IoC容器集成  2、与Spring MVC集成-->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		  <property name="securityManager" ref="securityManager"/>
		  <property name="loginUrl" value="/index"/>
		  <property name="successUrl" value="/home"/>
		  <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
	<!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
	<!-- defined will be automatically acquired and available via its beanName in chain        -->
	<!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
	<!-- <property name="filters">
	    <util:map>
	        <entry key="logout" value-ref="logoutFilter" />
	    </util:map>
	</property> -->
		  <property name="filterChainDefinitions">
		      <value>
		          # some example chain definitions:
		          # /admin/** = authc, roles[admin]
		          # /docs/** = authc, perms[document:read]
		          /login = anon
		          /logout = anon
		          /error = anon
		          /** = user
		          # more URL-to-FilterChain definitions here
		      </value>
		  </property>
	</bean>
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
	  <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
	  <property name="realm" ref="myRealm" />
	  <!-- By default the servlet container sessions will be used.  Uncomment this line
	       to use shiro's native sessions (see the JavaDoc for more): -->
	  <!-- <property name="sessionMode" value="native"/> -->
	</bean>
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>	
	<!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
	<!-- security datasource: -->
	<bean id="myRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
	  <property name="dataSource" ref="dataSource"/>
	  <property name="permissionsLookupEnabled" value="true"/>
	</bean>	
	<!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
	<!-- the lifecycleBeanProcessor has run: -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
	  <property name="securityManager" ref="securityManager"/>
	</bean>	
</beans>